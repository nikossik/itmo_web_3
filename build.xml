<?xml version="1.0" encoding="UTF-8"?>
<project name="WebProgrammingLab" default="build" basedir=".">

    <!-- === Global Properties === -->
    <property file="build.properties"/>
    <property name="ant.build.javac.source" value="17"/>
    <property name="ant.build.javac.target" value="17"/>
    <property name="ant.build.javac.includeantruntime" value="false"/>

    <!-- === Dependencies === -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
    
    <path id="common.classpath">
        <fileset dir="${lib.dir}" includes="*.jar"/>
    </path>

    <path id="src.classpath">
        <path refid="common.classpath"/>
    </path>

    <path id="test.classpath">
        <pathelement path="${classes.dir}"/>
        <pathelement path="${test.classes.dir}"/>
        <path refid="common.classpath"/>
    </path>

    <!-- === Initialization === -->
    <target name="init">
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
        <mkdir dir="${war.dir}"/>
    </target>

    <!-- === Compile Source === -->
    <target name="compile" depends="init" description="Compile application source code">
        <javac srcdir="${src.dir}" destdir="${classes.dir}" release="17" encoding="UTF-8" fork="true"
               includeantruntime="${ant.build.javac.includeantruntime}">
            <classpath refid="src.classpath"/>
            <compilerarg value="-processorpath"/>
            <compilerarg value="lib/lombok.jar"/>
        </javac>
        <copy todir="${classes.dir}">
            <fileset dir="src/main/resources"/>
        </copy>
    </target>

    <!-- === Compile Tests === -->
    <target name="compile-tests" depends="compile" description="Compile test sources">
        <javac srcdir="${test.src.dir}" destdir="${test.classes.dir}" release="17" encoding="UTF-8"
               includeantruntime="${ant.build.javac.includeantruntime}">
            <classpath refid="test.classpath"/>
        </javac>
    </target>

    <!-- === Run Tests === -->
    <target name="test" depends="compile-tests" description="Run JUnit 5 tests">
        <java jar="lib/junit-platform-console-standalone-1.8.2.jar" fork="true" failonerror="true">
            <arg value="--class-path"/>
            <arg pathref="test.classpath"/>
            <arg value="--scan-class-path"/>
            <arg value="${test.classes.dir}"/>
        </java>
    </target>

    <!-- === Build WAR === -->
    <target name="build" depends="compile-tests" description="Build WAR archive">
        <war destfile="${war.dir}/${name}.war" webxml="src/main/resources/WEB-INF/web.xml">
            <fileset dir="src/main/resources"/>
            <lib dir="${lib.dir}" includes="*.jar"/>
            <classes dir="${classes.dir}"/>
            <manifest>
                <attribute name="Version" value="${version}"/>
            </manifest>
        </war>
    </target>

    <!-- === Clean === -->
    <target name="clean" description="Clean all build outputs">
        <delete dir="${build.dir}"/>
    </target>

    <!-- === Deploy WAR via SCP === -->
    <target name="scp" depends="build" description="Deploy WAR to remote server">
        <scp file="${war.dir}/${name}.war"
             todir="${scp.user}@${scp.server}:${scp.remote.dir}"
             port="${scp.port}"
             keyfile="${scp.keyfile}"
             trust="true"
             verbose="true"/>
    </target>

    <!-- === Build ZIP with Previous Revisions === -->
    <target name="team" description="Package last 4 Git revisions into a ZIP archive">
        <mkdir dir="${revisions.dir}"/>

        <exec executable="git" outputproperty="current.branch">
            <arg value="rev-parse"/>
            <arg value="--abbrev-ref"/>
            <arg value="HEAD"/>
        </exec>

        <exec executable="git" outputproperty="commit.hashes">
            <arg value="log"/>
            <arg value="--pretty=format:%H"/>
            <arg value="-n"/>
            <arg value="5"/>
        </exec>

        <propertyregex property="previous.commits"
                       input="${commit.hashes}"
                       regexp="([^\n]*)\n([^\n]*)\n([^\n]*)\n([^\n]*)\n([^\n]*)"
                       select="\2,\3,\4,\5"/>

        <foreach list="${previous.commits}" param="commit.hash" target="build-revision"/>

        <zip destfile="${zip.file}">
            <fileset dir="${revisions.dir}" includes="*.war"/>
        </zip>

        <exec executable="git">
            <arg value="checkout"/>
            <arg value="${current.branch}"/>
        </exec>

        <delete dir="${revisions.dir}"/>
    </target>

    <target name="build-revision" description="Build WAR for a specific commit">
        <exec executable="git">
            <arg value="checkout"/>
            <arg value="${commit.hash}"/>
        </exec>

        <antcall target="clean"/>
        <antcall target="build"/>

        <copy file="${war.dir}/${name}.war" tofile="${revisions.dir}/${name}-${commit.hash}.war"/>
    </target>

</project>